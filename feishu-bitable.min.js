/**
 * FeishuBitable - 飞书多维表格 CRUD 操作库
 * @version 1.0.0
 * @author oeilei
 * @license MIT
 */
!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).FeishuBitable=e()}(function(){"use strict";class e extends Error{constructor(e,t,r){super(e),this.name="FeishuBitableError",this.code=t,this.details=r}}class t{constructor(e,t,r,n){if(!e||!t||!r||!n)throw new e("缺少必要的参数","INVALID_PARAMS",{required:["appId","appSecret","appToken","tableId"]});this.appId=e,this.appSecret=t,this.appToken=r,this.tableId=n,this.baseUrl=`https://open.feishu.cn/open-apis/bitable/v1/apps/${r}/tables/${n}/records`,this.accessToken="",this.tokenExpireTime=0,this.retryCount=3,this.retryDelay=1e3}async makeRequest(e,t,r=0){try{return console.debug(`[FeishuBitable] ${t.method} ${e}`,{headers:t.headers,body:t.body}),await new Promise((r,n)=>{if("undefined"!=typeof fetch)fetch(e,{method:t.method||"GET",headers:t.headers||{},body:t.body,timeout:1e4}).then(e=>e.json()).then(e=>{0!==e.code?n(new Error(e.msg||"请求失败")):r(e)}).catch(e=>n(e));else if("undefined"!=typeof GM_xmlhttpRequest)GM_xmlhttpRequest({url:e,method:t.method||"GET",headers:t.headers||{},data:t.body,timeout:1e4,onload:function(e){try{const t=JSON.parse(e.responseText);0!==t.code?n(new Error(t.msg||"请求失败")):r(t)}catch(e){n(new Error("解析响应失败"))}},onerror:e=>n(e),ontimeout:()=>n(new Error("请求超时"))});else{const o=new XMLHttpRequest;o.open(t.method||"GET",e),o.timeout=1e4,t.headers&&Object.keys(t.headers).forEach(e=>{o.setRequestHeader(e,t.headers[e])}),o.onload=function(){try{const e=JSON.parse(o.responseText);0!==e.code?n(new Error(e.msg||"请求失败")):r(e)}catch(e){n(new Error("解析响应失败"))}},o.onerror=e=>n(e),o.ontimeout=()=>n(new Error("请求超时")),o.send(t.body)}})}catch(e){if(r<this.retryCount&&(e.message.includes("网络")||e.message.includes("超时")))return await new Promise(e=>setTimeout(e,this.retryDelay)),this.makeRequest(e,t,r+1);throw e}}async getAccessToken(){if(this.accessToken&&Date.now()<this.tokenExpireTime-6e4)return this.accessToken;try{const e=await this.makeRequest("https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({app_id:this.appId,app_secret:this.appSecret})});return this.accessToken=e.tenant_access_token,this.tokenExpireTime=Date.now()+1e3*e.expire,this.accessToken}catch(e){throw console.error("获取访问令牌出错:",e),e}}async getHeaders(){const e=await this.getAccessToken();return{"Content-Type":"application/json",Authorization:`Bearer ${e}`}}async queryRecords(e="",t=10,r=""){try{const n=`${this.baseUrl}/search?user_id_type=open_id${t?`&page_size=${t}`:""}${r?`&page_token=${r}`:""}`,i=await this.getHeaders(),s=e?{filter:e}:{},o=await this.makeRequest(n,{method:"POST",headers:i,body:JSON.stringify(s)});return o.data?.items||[]}catch(e){throw console.error("查询记录出错:",e),e}}async addRecord(e){if(!e||"object"!=typeof e)throw new Error("无效的记录数据");try{const t=await this.getHeaders(),r=await this.makeRequest(this.baseUrl,{method:"POST",headers:t,body:JSON.stringify({fields:e})});return r.data.record.id}catch(e){throw console.error("添加记录出错:",e),e}}async updateRecord(e,t){if(!e)throw new Error("缺少记录ID");if(!t||"object"!=typeof t)throw new Error("无效的更新数据");try{const r=await this.getHeaders(),n=`${this.baseUrl}/${e}`,i=await this.makeRequest(n,{method:"PUT",headers:r,body:JSON.stringify({fields:t})});return!0}catch(e){throw console.error("更新记录出错:",e),e}}async deleteRecord(e){if(!e)throw new Error("缺少记录ID");try{const t=await this.getHeaders(),r=`${this.baseUrl}/${e}`;return await this.makeRequest(r,{method:"DELETE",headers:t}),!0}catch(e){throw console.error("删除记录出错:",e),e}}async batchDeleteRecord(e){if(!Array.isArray(e)||0===e.length)throw new Error("无效的记录ID列表");try{const t=await this.getHeaders(),r=`${this.baseUrl}/batch_delete`;return await this.makeRequest(r,{method:"POST",headers:t,body:JSON.stringify({record_ids:e})}),!0}catch(e){throw console.error("批量删除记录出错:",e),e}}setRetryConfig(e,t){if("number"!=typeof e||e<0)throw new Error("无效的重试次数");if("number"!=typeof t||t<0)throw new Error("无效的重试延迟");this.retryCount=e,this.retryDelay=t}}return t}); 