(e=>{class i extends Error{constructor(e,t,r){super(e),this.name="FeishuBitableError",this.code=t,this.details=r}}class t{constructor(e,t,r,s){if(!(e&&t&&r&&s))throw new i("缺少必要的参数","INVALID_PARAMS",{required:["appId","appSecret","appToken","tableId"]});this.appId=e,this.appSecret=t,this.appToken=r,this.tableId=s,this.baseUrl=`https://open.feishu.cn/open-apis/bitable/v1/apps/${r}/tables/${s}/records`,this.accessToken="",this.tokenExpireTime=0,this.retryCount=3,this.retryDelay=1e3}async makeRequest(o,a,t=0){try{return console.debug(`[FeishuBitable] ${a.method} `+o,{headers:a.headers,body:a.body}),await new Promise((r,s)=>{if("undefined"!=typeof GM_xmlhttpRequest)GM_xmlhttpRequest({url:o,method:a.method||"GET",headers:a.headers||{},data:a.body,timeout:1e4,onload:function(e){try{var t=JSON.parse(e.responseText);0!==t.code?s(new i(t.msg||"请求失败",t.code,t)):r(t)}catch(e){s(new i("解析响应失败","PARSE_ERROR",e))}},onerror:function(e){s(new i("网络请求失败","NETWORK_ERROR",e))},ontimeout:function(){s(new i("请求超时","TIMEOUT_ERROR"))}});else if("undefined"!=typeof fetch)fetch(o,{method:a.method||"GET",headers:a.headers||{},body:a.body,timeout:1e4}).then(e=>e.json()).then(e=>{0!==e.code?s(new i(e.msg||"请求失败",e.code,e)):r(e)}).catch(e=>{s(new i("网络请求失败","NETWORK_ERROR",e))});else{let t=new XMLHttpRequest;t.open(a.method||"GET",o),t.timeout=1e4,a.headers&&Object.keys(a.headers).forEach(e=>{t.setRequestHeader(e,a.headers[e])}),t.onload=function(){try{var e=JSON.parse(t.responseText);0!==e.code?s(new i(e.msg||"请求失败",e.code,e)):r(e)}catch(e){s(new i("解析响应失败","PARSE_ERROR",e))}},t.onerror=function(e){s(new i("网络请求失败","NETWORK_ERROR",e))},t.ontimeout=function(){s(new i("请求超时","TIMEOUT_ERROR"))},t.send(a.body)}})}catch(e){if(t<this.retryCount&&(e.message.includes("网络")||e.message.includes("超时")))return await new Promise(e=>setTimeout(e,this.retryDelay)),this.makeRequest(o,a,t+1);throw e}}async getAccessToken(){if(this.accessToken&&Date.now()<this.tokenExpireTime-6e4)return this.accessToken;try{var e=await this.makeRequest("https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({app_id:this.appId,app_secret:this.appSecret})});return this.accessToken=e.tenant_access_token,this.tokenExpireTime=Date.now()+1e3*e.expire,this.accessToken}catch(e){throw console.error("获取访问令牌出错:",e),e}}async getHeaders(){return{"Content-Type":"application/json",Authorization:"Bearer "+await this.getAccessToken()}}async queryRecords(e="",t=10,r=""){try{var s=this.baseUrl+"/search?user_id_type=open_id"+(t?"&page_size="+t:"")+(r?"&page_token="+r:""),o=await this.getHeaders(),a=e?{filter:e}:{};return(await this.makeRequest(s,{method:"POST",headers:o,body:JSON.stringify(a)})).data?.items||[]}catch(e){throw console.error("查询记录出错:",e),e}}async addRecord(e){if(!e||"object"!=typeof e)throw new i("无效的记录数据","INVALID_RECORD",{record:e});try{var t=await this.getHeaders();return(await this.makeRequest(this.baseUrl,{method:"POST",headers:t,body:JSON.stringify({fields:e})})).data.record.id}catch(e){throw console.error("添加记录出错:",e),e}}async updateRecord(e,t){if(!e)throw new i("缺少记录ID","INVALID_RECORD_ID",{recordId:e});if(!t||"object"!=typeof t)throw new i("无效的更新数据","INVALID_FIELDS",{fields:t});try{var r=await this.getHeaders(),s=this.baseUrl+"/"+e;await this.makeRequest(s,{method:"PUT",headers:r,body:JSON.stringify({fields:t})});return!0}catch(e){throw console.error("更新记录出错:",e),e}}async deleteRecord(e){if(!e)throw new i("缺少记录ID","INVALID_RECORD_ID",{recordId:e});try{var t=await this.getHeaders(),r=this.baseUrl+"/"+e;return await this.makeRequest(r,{method:"DELETE",headers:t}),!0}catch(e){throw console.error("删除记录出错:",e),e}}async batchDeleteRecord(e){if(!Array.isArray(e)||0===e.length)throw new i("无效的记录ID列表","INVALID_RECORD_IDS",{recordIds:e});try{var t=await this.getHeaders(),r=this.baseUrl+"/batch_delete";return await this.makeRequest(r,{method:"POST",headers:t,body:JSON.stringify({record_ids:e})}),!0}catch(e){throw console.error("批量删除记录出错:",e),e}}setRetryConfig(e,t){if("number"!=typeof e||e<0)throw new i("无效的重试次数","INVALID_RETRY_COUNT",{count:e});if("number"!=typeof t||t<0)throw new i("无效的重试延迟","INVALID_RETRY_DELAY",{delay:t});this.retryCount=e,this.retryDelay=t}}"function"==typeof define&&define.amd?define([],function(){return t}):"object"==typeof exports?module.exports=t:e.FeishuBitable=t})("undefined"!=typeof window?window:this);